<?php

require_once drupal_get_path('module', 'delicious_backup') . '/Files/JSLikeHTMLElement.php';
require_once drupal_get_path('module', 'delicious_backup') . '/Files/DeliciousBackup.class.php';
require_once drupal_get_path('module', 'delicious_backup') . '/Files/Readability.php';
require_once drupal_get_path('module', 'delicious_backup') . '/Files/url_to_absolute.merge.php';

// hooks
require_once drupal_get_path('module', 'delicious_backup') . '/delicious_backup.hooks.inc';

function delicious_backup_bookmark_access($node) {
  return $node->type == 'delicious_bookmark' && user_access('view content');
}

function _delicious_back_preload2(&$content) {
  
  #if (preg_match("/<code>.*(<br(|\s*\/)>).*<\/code>/m", $content, $res)) {
  #  $content = preg_replace("/(<br(|\s*\/)>)/", "\n", $content);
  #}  

  #drupal_add_css('code { white-space: pre; background-color:red;} ', 'inline');
  
}

function _delicious_back_preload(&$content) {
  
  //check for external gist scripts
  if (!preg_match_all('@<script src="(http://gist.github.com/(\d+).js)"></script>@i', $content, $match, PREG_SET_ORDER))
    return;

  // walk through all javascript code snippets
  foreach ($match as $git_code) {

    // request javascript file and filter out code
    $req = drupal_http_request($git_code[1]);
    if (isset($req->data) AND preg_match('@<a href="(.*gist\.github.*)"[ ]@i', stripslashes($req->data), $res)) {
      $req1 = drupal_http_request($res[1]);
      
      // replace external javascript file with raw source code
      if (isset($req1->data)) {
        $content = str_replace($git_code[0], '<pre>' . htmlentities($req1->data) . '</pre>', $content);
      }
     
    }
  }
}

/**
 * Implements hook_delicious_backup_updated().
 */
function delicious_backup_delicious_backup_updated($bid) {

  // create a worker for update content
  $queue = DrupalQueue::get('delicious_backup_update_node') ;
  $queue->createQueue();
  $queue->createItem($bid);
}

function _delicious_backup_full_worker() {
  /* queue workers */
  $queue = DrupalQueue::get('delicious_backup_get_content');
  while ($item = $queue->claimItem(15)) {
    delicious_backup_get_content($item->data);
    $queue->deleteItem($item);
  }  
  
  /* queue workers */
  $queue = DrupalQueue::get('delicious_backup_update_node');
  while ($item = $queue->claimItem(15)) {
    delicious_backup_update_node($item->data);
    $queue->deleteItem($item);
  }     
}

function delicious_backup_get_images(&$node, $html, $url) {
    
  $r = new Reader($url, $html);
    
  if (!count($imgs = $r->GetImagesInfo($html)) > 0) return false;
  
  foreach($imgs as $img) {
    _delicious_backup_get_image($node, $img);
  }
  
  return true;
}

function _delicious_backup_replace_img_src($node, $content) {
  
    if (!$field = field_get_items('node', $node, 'delicious_bookmark_image', $node->language)) {
      $field = array();
      //return $content;
    }

    $imgs = array();
    foreach($field as $img) {
      $imgs[$img['filename']] = array(
        'width' => '200',
        'src' => file_create_url($img['uri']),
       );
      
      if ($img['alt']) $imgs[$img['filename']]['alt'] = $img['alt'];
      if ($img['title']) $imgs[$img['filename']]['title'] = $img['title'];
      
    };
 
    $test = new Reader();
    return $test->ReplaceExternalImages($content, $imgs);
}

function delicious_backup_update_node($obj, $getimages = false) {

  $getimages = true;
  
  if (is_numeric($obj)) $obj = db_query("SELECT nid,bid,hash,href FROM {delicious_bookmarks_backup} WHERE bid = :bid", array(':bid' => $obj))->fetchObject();
  
  $file = 'public://delicious_backup/' . $obj->hash;

  if (!file_exists($file)) {
    watchdog('delicious_backup', 'No content for %id - %url ', array('%id' => $obj->bid, '%url' => $obj->href));
    return false;    
  }

  if (!$html = file_get_contents($file)) {
    watchdog('delicious_backup', 'Error getting hash file %id - %url ', array('%id' => $obj->bid, '%url' => $obj->href));
    return false;
  }
  
  if (strlen($html) == 0) {
    watchdog('delicious_backup', 'Zero content for %id - %url ', array('%id' => $obj->bid, '%url' => $obj->href));
    return false;    
  }

  $content = DeliciousBackup::Readability($html);
  $content = mb_convert_encoding($content, 'HTML-ENTITIES', "UTF-8");

  $node = node_load($obj->nid);

  if ($getimages == true) {
    $path = drupal_get_path('module', 'delicious_backup');    
    //require_once $path.'/Files/Reader.class.php';    
    delicious_backup_get_images($node, $content, $obj->href);
    
    $content = _delicious_backup_replace_img_src($node, $content);
    
  }

  $content = delicious_backup_filter($content);

  $node = node_load($obj->nid);
  $node->body[$node->language][0]['value'] = $content;
  $node->body[$node->language][0]['format'] = 'full_html';

  node_save($node);
  
  return true;
}

function _delicious_backup_get_image(&$node, $img_ar) {

  try {
    // check if image already attached to this node
    if ($images = field_get_items('node', $node, 'delicious_bookmark_image', $node->language)) {
      
      foreach($images as $img) {
        if (basename($img_ar['absolute_url']) == $img['filename']) return true;
      }
      
    }
    
    // download image and attach to node
    
    $img_path = 'public://link_image/'. $node->nid .'/' . basename($img_ar['absolute_url']);
    file_prepare_directory($dest_path = dirname($img_path), FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
    
    if (!file_exists($img_path)) {
      $res = drupal_http_request($img_ar['absolute_url']);
      if ($res->code != 200) throw new Exception('error getting image: ' . $img_ar['absolute_url']);
      file_put_contents($img_path, $res->data);    
    }
    
    // @TODO: more check here
    if (filesize($img_path) == 0) throw new Exception('invalid image file: ' . $img_ar['absolute_url']);
    
    // create a file object to attach
    $file =  new stdClass();
    #$files->uid = (isset($local_user->uid) && !empty($local_user->uid)?$local_user->uid:1);
    $file->filename = basename($img_ar['absolute_url']);
    $file->uri = $img_path;
    $file->filemime = file_get_mimetype($img_path);
    $file->status = 1;
    
    // attributes
    if (isset($img_ar['alt'])) $file->alt = $img_ar['alt'];
    if (isset($img_ar['title'])) $file->title = $img_ar['title'];    
    
    file_save($file);
    
    $node->delicious_bookmark_image[$node->language][]['fid'] = $file->fid;    

    // @TODO: reload node to get new field; some better funtion?
    node_save($node);
    
    $node = node_load($node->nid);

  } catch (Exception $e) {
    watchdog_exception('delicious_backup', $e);
    return false;
  }
  
  return true;
}

function delicious_backup_import_bookmarks() {

  $vid = taxonomy_vocabulary_machine_name_load('delicious_backup_tags')->vid;

  // load bookmarks from delicious
  if (!$bookmarks = DeliciousBackup::GetResponse('posts/all?')) {
    watchdog('delicious_backup', 'could not import bookmarks from delicous'); 
    return false;
  }
  
  $xml = new SimpleXMLElement($bookmarks);

  $new = 0;
  foreach ($xml->post as $post) {
    
    // dont work on private links
    if (!isset($post['shared']) AND (string) $post['shared'] != 'no') {

      // import bookmark
      db_merge('delicious_bookmarks_backup')
        ->key(array('hash' => (string) $post['hash']))
        ->fields(array(
            'href' => (string) $post['href'],
            'meta' => (string) $post['meta'],
            'description' => (string) $post['description'],
            'time' => strtotime((string) $post['time']),
            'extended' => (string) $post['extended'],
            'tag' => (string) $post['tag'],
            'last_found' => time(),
        ))
        ->execute();

      // get bookmarks
      $obj = db_query("SELECT nid,bid FROM {delicious_bookmarks_backup} WHERE hash = :hash", array(':hash' => (string) $post['hash']))->fetchAssoc();

      // import tags to terms
      $categories = _delicious_backup_taxonomie_helper(explode(' ', $post['tag']),  $vid);

      if ($obj['nid'] == 0) {

        $node = new stdClass();
        $node->type = 'delicious_bookmark';
        $node->language = LANGUAGE_NONE;

        node_object_prepare($node);
        $node->title = (string) $post['description'];
        $node->delicious_backup_tags[LANGUAGE_NONE] = $categories;
        $node->created = strtotime((string) $post['time']);

        node_save($node);

        db_update('delicious_bookmarks_backup')
          ->fields(array('nid' => $node->nid, 'last_found' => time()))
          ->condition('hash', (string) $post['hash'])
          ->execute();
        
        watchdog('delicious_backup', 'New node %bid', array('%bid' => $obj['bid']));

        $new++;

      } else {

        if ($node = node_load($obj['nid'])) {
          $node->delicious_backup_tags[LANGUAGE_NONE] = $categories;
          $node->created = strtotime((string) $post['time']);
          
          node_save($node);
        } else {
          watchdog('delicious_backup', 'Resetting Bookmark %bid ', array('%bid' => $obj['bid']));
          db_update('delicious_bookmarks_backup')->fields(array('nid' => 0))->condition('bid', $obj['bid'])->execute();          
        }

      }
   }
  }

  if ($new > 0) watchdog('delicious_backup', 'New %count Bookmark(s) Imported', array('%count' => $new));

}

function _delicious_backup_taxonomie_helper($term_name, $vid) {

  // first paramter can be string or array
  if (is_string($term_name)) $term_name = array($term_name);

  $b = array();
  foreach($term_name as $term_str) {

    // look for term and filter it by vocabulary; sry not in drupal core
    if ($terms = taxonomy_get_term_by_name($term_str)) {
      foreach($terms as $term) {
        if ($term->vid == $vid) $b[] = array('tid' => $term->tid);
     }

    } else {

      // create a new term
      $edit = array(
        'name' => $term_str,
        'description' => '',
        'parent' => array(0),
        'vid' =>  $vid,
      );

      $term = (object) $edit;
      taxonomy_term_save($term);
      $b[] = array('tid' => $term->tid);

    }
  }

  return $b;
}

function delicious_backup_get_content($link) {

  if (is_numeric($link)) $link = db_query("SELECT bid, hash, href FROM {delicious_bookmarks_backup} WHERE bid = :bid", array(':bid' => $link))->fetchObject();
  
  $opts = array(
    'timeout' => 10,
  );

  $result = drupal_http_request($link->href, $opts);

  if ($result->code == 200) {
    //db_update('delicious_bookmarks_backup')->fields(array('content_fetched' => time(), 'html_content' => gzencode ($result->data)))->condition('bid',$bid)->execute();
    db_update('delicious_bookmarks_backup')->fields(array('response_code' => $result->code, 'content_fetched' => time(), 'content_updated' => time(), 'queued' => 0))->condition('bid', $link->bid)->execute();
    if (!file_exists('public://delicious_backup')) drupal_mkdir('public://delicious_backup');

    file_put_contents('public://delicious_backup/' . $link->hash, $result->data);
    
    module_invoke_all('delicious_backup_updated', $link->bid);

    watchdog('delicious_backup', 'OK getting html content %id - %url ', array('%id' => $link->bid, '%url' => $link->href));

  } else {
    watchdog('delicious_backup', 'Error getting html content %id - %url ', array('%id' => $link->bid, '%url' => $link->href), WATCHDOG_ALERT);
    
    db_update('delicious_bookmarks_backup')
    ->fields(array(
      'content_fetched' => time(),
      'response_code' => $result->code,
      'queued' => 0,
    ))
    ->expression('response_errors', 'response_errors + 1')
    ->condition('bid', $link->bid)->execute();
    
  }

}

function delicious_backup_filter($str, $refilter = false, $node = false) {
  
    require_once drupal_get_path('module', 'delicious_backup') . '/Files/htmLawed.php';

    
    $config = array('safe'=>1, 'elements'=>'img, h1, h2, h3, h4 ,h5, a, em, b, strong, cite, code, ol, ul, li, dl, dt, dd, p, div, span, code, blockquote, pre', 'deny_attribute'=>'id, style, class');
    $text = htmLawed($str, $config);
    $text = _delicious_backup_replace_img_src($node, $text);
  
  #  $node111 = node_load($node->nid);
  #$node111->body[$node->language][0]['value'] = $text;
  #$node111->body[$node->language][0]['format'] = 'full_html';

  #node_save($node);    
    return _filter_autop($text);
  
    return '';

    if (!file_exists('public://HTMLPurifierCache')) drupal_mkdir('public://HTMLPurifierCache');

    require_once drupal_get_path('module', 'delicious_backup') . '/library/HTMLPurifier.auto.php';

    #$config = HTMLPurifier_Config::createDefault();
    #$purifier = new HTMLPurifier();
    #$config =HTMLPurifier_Config::createDefault()->getHTMLDefinition(true)->addElement('article', "header", "footer", "aside", array());

    $config = HTMLPurifier_Config::createDefault();

    #$config->getHTMLDefinition(true)->addElement('article', "header", "footer", "aside", array());
    #$config->set('HTML.Allowed', 'div[id]');
    #$config->set('AutoFormat.AutoParagraph', true);
    $config->set('AutoFormat.RemoveEmpty', true);
    #$config->set('AutoFormat.RemoveEmpty.RemoveNbsp', true);

    if ($refilter == false) {
      $config->set('Attr.EnableID', true);
      #$config->set('HTML.EnableAttrID', true);
      #$config->set('Attr.IDPrefix', 'dsb_');
      $config->set('HTML.Allowed', 'div[id],ul[id],li[class],ul[class],p,pre,h2,h3,h4,5,br,code,blockquote,article,img[src],img[width],img[alt],img[title],strong,a[href]');
    } else {
      $config->set('Attr.EnableID', false);      
      $config->set('HTML.Allowed', 'div,ul,li,p,pre,h2,h3,h4,h5,br,code,blockquote,b,u,i,ol,strong,a[href],img[src],img[width],img[alt],img[title]');
    }

    $config->set('Cache.SerializerPath', 'public://HTMLPurifierCache');

    $purifier = new HTMLPurifier($config);
    return $purifier->purify($str);
}
?>