<?php
define('DELICIOUS_BACKUP_ROOT_DIR', 'public://dm/');

require_once drupal_get_path('module', 'delicious_backup') . '/Files/JSLikeHTMLElement.php';
require_once drupal_get_path('module', 'delicious_backup') . '/Files/DeliciousBackup.class.php';
require_once drupal_get_path('module', 'delicious_backup') . '/Files/Readability.php';
require_once drupal_get_path('module', 'delicious_backup') . '/Files/url_to_absolute.merge.php';

// hooks
require_once drupal_get_path('module', 'delicious_backup') . '/delicious_backup.hooks.inc';
#require_once drupal_get_path('module', 'delicious_backup') . '/delicious_backup.drush.inc';

function delicious_backup_bookmark_access($node) {
  return $node->type == 'delicious_bookmark' && user_access('view content');
}


/**
 * Implements hook_delicious_backup_updated().
 */
function delicious_backup_delicious_backup_updated($bid) {

  // create a worker for update content
  $queue = DrupalQueue::get('delicious_backup_update_node') ;
  $queue->createQueue();
  $queue->createItem($bid);
}

function delicious_backup_update_node($obj, $getimages = false) {
  
  try {

    if (is_numeric($obj)) $obj = db_query("SELECT nid,bid,hash,href FROM {delicious_bookmarks_backup} WHERE bid = :bid", array(':bid' => $obj))->fetchObject();
    
    $test = new DeliciousBackupReader($obj->nid);
    $test->UpdateNode();
    
  
  } catch (Exception $e) {
    watchdog('delicious_backup', 'error on bid: ' . $obj->bid . ' ' . $e->getMessage());
    return false;
  }  
  
}

function delicious_backup_import_bookmarks() {

  $vid = taxonomy_vocabulary_machine_name_load('bookmark_tags')->vid;

  // load bookmarks from delicious
  if (!$bookmarks = DeliciousBackup::GetResponse('posts/all?')) {
    watchdog('delicious_backup', 'could not import bookmarks from delicous'); 
    return false;
  }
  
  watchdog('delicious_backup', 'import bookmarks from delicous'); 
  
  $xml = new SimpleXMLElement($bookmarks);

  $new = 0;
  foreach ($xml->post as $post) {
    
    // dont work on private links
    if (!isset($post['shared']) AND (string) $post['shared'] != 'no') {

      // import bookmark
      db_merge('delicious_bookmarks_backup')
        ->key(array('hash' => (string) $post['hash']))
        ->fields(array(
            'href' => (string) $post['href'],
            'meta' => (string) $post['meta'],
            'description' => (string) $post['description'],
            'time' => strtotime((string) $post['time']),
            'extended' => (string) $post['extended'],
            'tag' => (string) $post['tag'],
            'last_found' => time(),
        ))
        ->execute();

      // get bookmarks
      $obj = db_query("SELECT nid,bid FROM {delicious_bookmarks_backup} WHERE hash = :hash", array(':hash' => (string) $post['hash']))->fetchAssoc();

      // import tags to terms
      $categories = _delicious_backup_taxonomie_helper(explode(' ', $post['tag']),  $vid);

      if ($obj['nid'] == 0) {

        $node = new stdClass();
        $node->type = 'delicious_bookmark';
        $node->language = LANGUAGE_NONE;

        node_object_prepare($node);
        $node->title = (string) $post['description'];
        $node->bookmark_tags[LANGUAGE_NONE] = $categories;
        $node->created = strtotime((string) $post['time']);
        
        $node->promote = 1;

        node_save($node);

        db_update('delicious_bookmarks_backup')
          ->fields(array('nid' => $node->nid, 'last_found' => time()))
          ->condition('hash', (string) $post['hash'])
          ->execute();
        
        watchdog('delicious_backup', 'New node %bid', array('%bid' => $obj['bid']));

        $new++;

      } else {
        
        if ($node = node_load($obj['nid'])) {
          $node->bookmark_tags[LANGUAGE_NONE] = $categories;
          $node->created = strtotime((string) $post['time']);
          $node->promote = 1;
          
          node_save($node);
        } else {
          watchdog('delicious_backup', 'Resetting Bookmark %bid ', array('%bid' => $obj['bid']));
          db_update('delicious_bookmarks_backup')->fields(array('nid' => 0))->condition('bid', $obj['bid'])->execute();          
        }

      }
   }
  }

  if ($new > 0) watchdog('delicious_backup', 'New %count Bookmark(s) Imported', array('%count' => $new));

}

function _delicious_backup_taxonomie_helper($term_name, $vid) {

  // first paramter can be string or array
  if (is_string($term_name)) $term_name = array($term_name);

  $b = array();
  foreach($term_name as $term_str) {

    // look for term and filter it by vocabulary; sry not in drupal core
    if ($terms = taxonomy_get_term_by_name($term_str)) {
      foreach($terms as $term) {
        if ($term->vid == $vid) $b[] = array('tid' => $term->tid);
     }

    } else {

      // create a new term
      $edit = array(
        'name' => $term_str,
        'description' => '',
        'parent' => array(0),
        'vid' =>  $vid,
      );

      $term = (object) $edit;
      taxonomy_term_save($term);
      $b[] = array('tid' => $term->tid);

    }
  }

  return $b;
}

function delicious_backup_get_content($link) {

  if (is_numeric($link)) $link = db_query("SELECT bid, hash, href, nid FROM {delicious_bookmarks_backup} WHERE bid = :bid", array(':bid' => $link))->fetchObject();
  try {
    $test = new DeliciousBackupReader($link->nid);
    $test->GetExternalHTML();
    $test->UpdateNode();    
    
    return $test->GetLog();
  } catch (Exception $e) {
    watchdog('delicious_backup', 'error on bid: ' . $obj->bid . ' ' . $e->getMessage());
  }

}

function delicious_backup_get_valid_bookmarks() {
  return db_select('delicious_bookmarks_backup')
    ->fields('delicious_bookmarks_backup', array('bid', 'hash', 'href', 'nid'))
    ->condition('response_code', 200)
    #->condition('bid', 1340)
    ->orderBy('bid')
    ->execute();
}

function _delicious_backup_get_bookmark_info($nid, $views_mode = 'teaser') {
  
  if (is_numeric($nid)) {
    $obj = db_query("SELECT * FROM {delicious_bookmarks_backup} WHERE nid = :nid", array(':nid' => $nid))->fetchAssoc();
  }
  
  $node = node_load($obj['nid']);
  
  $parsed = parse_url($obj['href']);
  $parsed['host'] = _filter_url_trim(str_replace('www.', '', $parsed['host']), 23);

  $infos = '';
  $test = array();
  $test['link'] = l($parsed['host'], $obj['href']);
  #$test['last_found'] = format_date($obj->last_found);
  $test['added'] = format_date($obj['time']);
  #$test['content_fetched'] = format_date('content_fetched');
  #['dm-tags'] = render($content['delicious_backup_tags']);
  
  if ($shared = db_query("SELECT weight FROM {flag_content} WHERE content_id = :nid", array(':nid' => $nid))->fetchField()) {
    $test['shared'] = 'Shared: ' . l($shared, 'http://www.delicious.com/url/' . $obj['hash']);
  }
  
  $test['dm-tags'] = render(field_view_field('node', $node, 'bookmark_tags', 'teaser'));  
  
  
  global $user;
  if($user->uid == 1 AND $views_mode != 'teaser') {
    $test['online'] = 'HTTP-Check: ' . ($obj['response_code'] == 200 ? 'OK' : 'offline');
    $test['hash'] = $obj['hash'];
    $test['bid'] = 'bid: ' . $obj['bid'];
    
    $test += array(
      'last_update' => 'Update: ' . format_date($obj['content_fetched']),
      'delicious_sync' => 'Sync: ' . format_date($obj['last_found']),    
    );  
  
  }
  
  $infos = array('attributes' => array('class' => 'dm-info'));
  foreach ($test as $key => $value) {
    $infos['items'][] = array('data' => $value, 'class' => array('icon', $key));
  }  

  return theme('item_list', $infos);  

}

?>